#include <iostream>
#include <hiredis/hiredis.h>
#include <unistd.h>
#include <ctime>
#include <chrono>

const char* g_data12k = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";

const int g_expiretime = 3600;

void test_write(redisContext* c, const char *key) {
    for(int i=0; i<500; i++) {
        redisReply* set_reply = (redisReply*)redisCommand(c,
            "HMSET %s%03d area area Data1 \"%s\" Data2 \"%s\" Data3 \"%s\" Data4 \"%s\" UpdateTime %s%03d GameID 123 IDC 123 Server 123.45.67.89 ver 123"
            , key, i, g_data12k, g_data12k, g_data12k, g_data12k, key, i);
        if (set_reply == NULL || set_reply->type == REDIS_REPLY_ERROR) {
            std::cerr << "SET command failed: " << c->errstr << std::endl;
            freeReplyObject(set_reply);
            redisFree(c);
            exit(1);
        }
        freeReplyObject(set_reply);

        redisReply* expire_reply = (redisReply*)redisCommand(c, "EXPIRE %s%03d %d", key, i, g_expiretime);
        if (expire_reply == NULL || expire_reply->type == REDIS_REPLY_ERROR) {
            std::cerr << "EXPIRE command failed: " << c->errstr << std::endl;
            freeReplyObject(expire_reply);
            redisFree(c);
            exit(1);
        }
        freeReplyObject(expire_reply);

        redisReply* zset_reply = (redisReply*)redisCommand(c, "ZADD zset_key %s%03d %s%03d", key, i, key, i);
        if (zset_reply == NULL || set_reply->type == REDIS_REPLY_ERROR) {
            std::cerr << "ZSET command failed: " << c->errstr << std::endl;
            freeReplyObject(zset_reply);
            redisFree(c);
            exit(1);
        }
        freeReplyObject(zset_reply);
        //usleep(1);
    }
}

void test_read(redisContext* c, const char *key) {
    for(int i=0; i<125; i++) {
        redisReply* get_reply = (redisReply*)redisCommand(c, "HMGET %s%03d ver Data1 Data2 Data3 Data4", key, i*2);
        if (get_reply == NULL || get_reply->type != REDIS_REPLY_ARRAY) {
            std::cerr << "GET command failed: " << c->errstr << std::endl;
            freeReplyObject(get_reply);
            redisFree(c);
            exit(1);
        }
        /*for (int j = 0; j < get_reply->elements; j++) {
            std::cout << "GET operation successful. Value: " << get_reply->element[j]->str << std::endl;
        }*/
        freeReplyObject(get_reply);
        //usleep(1);
    }
}

void test_range(redisContext* c, const char *key) {
    redisReply* range_reply = (redisReply*)redisCommand(c, "ZRANGEBYSCORE zset_key -inf +inf WITHSCORES LIMIT 0 20");
    if (range_reply == NULL || range_reply->type != REDIS_REPLY_ARRAY) {
        std::cerr << "ZRANGEBYSCORE command failed: " << c->errstr << std::endl;
        freeReplyObject(range_reply);
        redisFree(c);
        exit(1);
    }
    for (int j = 0; j < range_reply->elements; j++) {
        //std::cout << "ZREM: " << range_reply->element[j]->str << std::endl;
        redisReply* rem_reply = (redisReply*)redisCommand(c, "ZREM zset_key %s", range_reply->element[j]->str);
        if (rem_reply == NULL || rem_reply->type == REDIS_REPLY_ERROR) {
            std::cerr << "ZREM command failed: " << c->errstr << std::endl;
            freeReplyObject(rem_reply);
            redisFree(c);
            exit(1);
        }
        freeReplyObject(rem_reply);
    }
    freeReplyObject(range_reply);
}

int main(int argc, char *argv[]) {
    std::time_t t, last = std::time(0);
    char ts_str[21];
    char mode = (argc > 2 && argv[2][0] == 'w') ? 'w' : 'r';
    pid_t pid = getpid();

    if (argc < 2) {
        std::cout << "usage: ./logic-test redis-server [r|w] " << std::endl;
        return 1;
    }

    std::cout << "Start test " << mode << std::endl;

    /* Create Redis context and establish connection */
    redisContext* c = redisConnect(argv[1], 6379);
    if (c == NULL || c->err) {
        std::cerr << "Error Redis context and establish connection." << std::endl;
        exit(1);
    }
    while(true) {
        t = std::time(0);
        // 如果执行时间比上次超出了一秒，证明出现性能问题
        if (t > last + 1) {
            std::cerr << "Performance problem found." << std::endl;
            exit(1);
        }
        if (t > last) {
            snprintf(ts_str, 20, "%lu", t);
            if (mode == 'w') {
                std::chrono::milliseconds ts1 = std::chrono::duration_cast< std::chrono::milliseconds >(std::chrono::system_clock::now().time_since_epoch());
                test_write(c, ts_str);
                std::chrono::milliseconds ts2 = std::chrono::duration_cast< std::chrono::milliseconds >(std::chrono::system_clock::now().time_since_epoch());
                test_read(c, ts_str);
                std::chrono::milliseconds ts3 = std::chrono::duration_cast< std::chrono::milliseconds >(std::chrono::system_clock::now().time_since_epoch());
                std::cerr << "pid:" << pid << " ts:" << t << " write:" << ts2.count() - ts1.count() << "ms read:" << ts3.count() - ts2.count() << "ms" << std::endl;
            } else {
                std::chrono::milliseconds ts1 = std::chrono::duration_cast< std::chrono::milliseconds >(std::chrono::system_clock::now().time_since_epoch());
                test_range(c, ts_str);
                std::chrono::milliseconds ts2 = std::chrono::duration_cast< std::chrono::milliseconds >(std::chrono::system_clock::now().time_since_epoch());
                std::cerr << "pid:" << pid << " ts:" << t << " range:" << ts2.count() - ts1.count() << "ms" << std::endl;
            }
            last = t;
        }
    }
    redisFree(c);
    std::cout << "connect end" << std::endl;

    return 0;
}
